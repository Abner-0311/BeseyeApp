<?xml version="1.0" encoding="UTF-8"?>
<project name="Beseye" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    
    <property name="alpha.package" value="com.app.beseye.alpha" />
    <property name="live.package" value="com.app.beseye.alpha" />
    <property name="config-target-dir-path" value="com/app/beseye/util" />
    
     <target name="-increase-version">
         <if condition="${build.is.packaging.debug}">
	        <then>

	        </then>
	        <else>
	            <propertyfile file="version.properties">
		            <entry key="app.version.code" type="int" operation="+" value="1" />
		            <entry key="app.version.minor" type="int" operation="+" value="1" />
		        </propertyfile>
		        <property file="version.properties" />
		        <echo>Version code: ${app.version.code}</echo>
		        <echo>Version name: ${app.version.major}${app.version.minor}</echo>
		        
		        <property name="match.end" value='"' />
		        
		        <property name="matchVersionCode.start" value='android:versionCode=\"' />
		        <replaceregexp file="AndroidManifest.xml" match='${matchVersionCode.start}[^"]*${match.end}' replace="${matchVersionCode.start}${app.version.code}${match.end}" />
		
		        <property name="matchVersionName.start" value='android:versionName=\"' />
		        <replaceregexp file="AndroidManifest.xml" match='${matchVersionName.start}[^"]*${match.end}' replace="${matchVersionName.start}${app.version.major}${app.version.minor}${app.version.branch}${match.end}" />
		        
		        <property name="matchAppName.start" value='android:label=\"' />
		        <replaceregexp file="AndroidManifest.xml" match='${matchAppName.start}[^"]*${match.end}' replace="${matchAppName.start}@string/app_name${match.end}" />
	        </else>
	    </if>
    </target>
    
	<target name="-change-config">
	    <if condition="${build.is.packaging.debug}">
	        <then>
	            <antcall target="-release-alpha"></antcall>
	        </then>
	        <else>
	            <antcall target="-release-public"></antcall>
	        </else>
	    </if>
    </target>
    
    <target name="switch-config">
        <echo>Configuration file: ${config.filename}</echo>
        <property name="config-target-path" value="${source.dir}/${config-target-dir-path}" />
        <echo>Saving original Config...</echo>
	    <copy file="${config-target-path}/BeseyeConfig.java" tofile="BeseyeConfig.java.bak" />
        <copy file="${config.filename}" todir="${config-target-path}" overwrite="true" encoding="utf-8">
        </copy>
    </target>
    
    <target name="-release-alpha">
        <echo>Selected developer configuration</echo>
        <antcall target="switch-config">
            <param name="config.filename" value="config_alpha/BeseyeConfig.java" />
        </antcall>
        
    </target>

    <target name="-release-beta">
        <echo>Selected developer configuration</echo>
        <antcall target="switch-config">
            <param name="config.filename" value="config_beta/BeseyeConfig.java" />
        </antcall>
        
    </target>

    <target name="-release-public">
        <echo>Selected release configuration</echo>
        <antcall target="switch-config">
            <param name="config.filename" value="config_release/BeseyeConfig.java" />
        </antcall>
    </target>
    
    <target name="-recover-config">
        <property name="config-target-path" value="${source.dir}/${config-target-dir-path}" />
        <delete file="${config-target-path}/BeseyeConfig.java" quiet="true" />
        <copy file="BeseyeConfig.java.bak" tofile="${config-target-path}/BeseyeConfig.java" />
        <delete file="BeseyeConfig.java.bak" quiet="true" />
    </target>
    
    <target name="-save-manifest">
        <if condition="${build.is.packaging.debug}">
	        <then>
	            
		        <property file="version.properties" />
		        <echo>Version code: ${app.version.alpha.code}</echo>
		        <echo>Version name: ${app.version.alpha.major}${app.version.alpha.minor}</echo>
		        
		        <property name="match.end" value='"' />
		        
		        <property name="matchVersionCode.start" value='android:versionCode=\"' />
		        <replaceregexp file="AndroidManifest.xml" match='${matchVersionCode.start}[^"]*${match.end}' replace="${matchVersionCode.start}${app.version.alpha.code}${match.end}" />
		
		        <property name="matchVersionName.start" value='android:versionName=\"' />
		        <replaceregexp file="AndroidManifest.xml" match='${matchVersionName.start}[^"]*${match.end}' replace="${matchVersionName.start}${app.version.alpha.major}${app.version.alpha.minor}${app.version.branch}${match.end}" />
		        
			    <property name="matchAppName.start" value='android:label=\"' />
			    <replaceregexp file="AndroidManifest.xml" match='${matchAppName.start}[^"]*${match.end}' replace="${matchAppName.start}@string/app_name_alpha${match.end}" />
			    
			    <propertyfile file="version.properties">
		            <entry key="app.version.alpha.code" type="int" operation="+" value="1" />
		            <entry key="app.version.alpha.minor" type="int" operation="+" value="1" />
		        </propertyfile>
	        </then>
	    </if>
	    <echo>Saving AndroidManifest.xml...</echo>
	    <copy file="AndroidManifest.xml" tofile="AndroidManifest-backup.xml" />
	    
	    <!--  
	    <if condition="${build.is.packaging.debug}">
	        <then>
	            <echo>no need to do else...</echo>
	        </then>
	        <else>
	            <echo>Saving .classpath...</echo>
			    <copy file=".classpath" tofile=".classpath-backup" />
			    
			    <echo>switch Hami SDK jar...</echo>
			    <copy file="libs/Hami_Apps_SDK_Dev_V1.06_20110621.jar" tofile="libs_dev/Hami_Apps_SDK_Dev_V1.06_20110621.jar" />
			    <delete file="libs/Hami_Apps_SDK_Dev_V1.06_20110621.jar" quiet="false" />
			    <copy file="libs_rel/Hami_Apps_SDK_V1.06_20110621.jar" tofile="libs/Hami_Apps_SDK_V1.06_20110621.jar" />
	        </else>
	    </if>
	    -->
	</target>
	
    <target name="-change-package-name">
        <if condition="${build.is.packaging.debug}">
	        <then>
	            <replace file="AndroidManifest.xml">
				    <replacefilter token="${app.package}" value="${alpha.package}" />
				    <replacefilter token='name=".' value='name="${app.package}.' />
			    </replace>
	        </then>
	        <else>
	            <replace file="AndroidManifest.xml">
				    <replacefilter token="${app.package}" value="${live.package}" />
				    <replacefilter token='name=".' value='name="${app.package}.' />
			    </replace>
	        </else>
	    </if>
	    
	    <echo>...............project.app.package before change....${project.app.package}......</echo>
        <xpath input="${manifest.abs.file}"
              expression="/manifest/@package" output="project.app.package" />
        <echo>...............project.app.package after change.....${project.app.package}......</echo>
        <mergemanifest
                appManifest="${manifest.abs.file}"
                outManifest="${out.manifest.abs.file}"
                enabled="true">
            <library refid="project.library.manifest.file.path" />
        </mergemanifest>	    
	</target>
	
	<target name="-restore-manifest">
	    <echo>Restoring AndroidManifest.xml...</echo>
	    <delete file="AndroidManifest.xml" quiet="true" />
	    <copy file="AndroidManifest-backup.xml" tofile="AndroidManifest.xml" />
	    <delete file="AndroidManifest-backup.xml" quiet="true" />
	    <property name="matchAppName.start" value='android:label=\"' />
		<replaceregexp file="AndroidManifest.xml" match='${matchAppName.start}[^"]*${match.end}' replace="${matchAppName.start}@string/app_name${match.end}" />
	</target>
	
	<target name="-post-build">
	    <if condition="${build.is.packaging.debug}">
	        <then>
	            <echo>no need to do else...</echo>
	        </then>
	        <else>
	            <!--  
	            <echo>Restoring .classpath...</echo>
			    <delete file=".classpath" quiet="true" />
			    <copy file=".classpath-backup" tofile=".classpath" />
			    <delete file=".classpath-backup" quiet="true" />
			    
			    <echo>switch Hami SDK jar back...</echo>
			    <copy file="libs_dev/Hami_Apps_SDK_Dev_V1.06_20110621.jar" tofile="libs/Hami_Apps_SDK_Dev_V1.06_20110621.jar" />
			    <copy file="libs/Hami_Apps_SDK_V1.06_20110621.jar" tofile="libs_rel/Hami_Apps_SDK_V1.06_20110621.jar" />
			    <delete file="libs/Hami_Apps_SDK_V1.06_20110621.jar" quiet="true" />
			    -->
	        </else>
	    </if>
	</target>
	
	<target name="-ask-package" if="build.is.packaging.debug">
	    <input
	      message="Enter package name?"
	      addproperty="ask.package"
	      defaultvalue="${app.package}.debug"
	    />
	    <condition property="final.package" value="${app.package}" else="${ask.package}">
	      <equals arg1="${app.package}" arg2="${ask.package}"/>
	    </condition>
	    
	</target>
	
	<target name="-package" depends="-dex, -package-resources, -restore-manifest, -recover-config">
        <!-- only package apk if *not* a library project -->
        <do-only-if-not-library elseText="Library project: do not package apk..." >
            <if condition="${build.is.instrumented}">
                <then>
                    <package-helper>
                        <extra-jars>
                            <!-- Injected from external file -->
                            <jarfile path="${emma.dir}/emma_device.jar" />
                        </extra-jars>
                    </package-helper>
                </then>
                <else>
                    <package-helper />
                </else>
            </if>
        </do-only-if-not-library>
    </target>
    <target name="-pre-build">
        <antcall target="-change-config"></antcall>
    </target>
    
        <!-- Code Generation: compile resources (aapt -> R.java), aidl, renderscript -->
    <target name="-code-gen">
        <!-- always merge manifest -->
        <mergemanifest
                appManifest="${manifest.abs.file}"
                outManifest="${out.manifest.abs.file}"
                enabled="${manifestmerger.enabled}">
            <library refid="project.library.manifest.file.path" />
        </mergemanifest>

        <do-only-if-manifest-hasCode
                elseText="hasCode = false. Skipping aidl/renderscript/R.java">
            <echo level="info">Handling aidl files...</echo>
            <aidl executable="${aidl}"
                    framework="${project.target.framework.aidl}"
                    libraryBinAidlFolderPathRefid="project.library.bin.aidl.folder.path"
                    genFolder="${gen.absolute.dir}"
                    aidlOutFolder="${out.aidl.absolute.dir}">
                <source path="${source.absolute.dir}"/>
            </aidl>

            <!-- renderscript generates resources so it must be called before aapt -->
            <echo level="info">----------</echo>
            <echo level="info">Handling RenderScript files...</echo>
            <property name="renderscript.target" value="${project.minSdkVersion}" />
            <renderscript
                    buildToolsRoot="${android.build.tools.dir}"
                    genFolder="${gen.absolute.dir}"
                    resFolder="${out.res.absolute.dir}"
                    rsObjFolder="${out.rs.obj.absolute.dir}"
                    libsFolder="${out.rs.libs.absolute.dir}"
                    targetApi="${renderscript.target}"
                    optLevel="${renderscript.opt.level}"
                    supportMode="${renderscript.support.mode}"
                    binFolder="${out.absolute.dir}"
                    buildType="${build.is.packaging.debug}"
                    previousBuildType="${build.last.is.packaging.debug}">
                <source path="${source.absolute.dir}"/>
            </renderscript>


            <echo level="info">----------</echo>
            <echo level="info">Handling Resources...</echo>
            <aapt executable="${aapt}" 
				  command="package" 
				  verbose="${verbose}" 
				  manifest="${out.manifest.abs.file}" 
		          originalManifestPackage="${project.app.package}" 
				  androidjar="${project.target.android.jar}" 
				  rfolder="${gen.absolute.dir}" 
				  nonConstantId="${android.library}" 
				  libraryResFolderPathRefid="project.library.res.folder.path" 
		  		  libraryPackagesRefid="project.library.packages" 
				  libraryRFileRefid="project.library.bin.r.file.path" 
				  ignoreAssets="${aapt.ignore.assets}" 
				  binFolder="${out.absolute.dir}" 
				  proguardFile="${out.absolute.dir}/proguard.txt">
		  		<res path="${out.res.absolute.dir}" /> 
		  		<res path="${resource.absolute.dir}" /> 
	  	    </aapt>

            <echo level="info">----------</echo>
            <echo level="info">Handling BuildConfig class...</echo>
            <buildconfig
                    genFolder="${gen.absolute.dir}"
                    package="${project.app.package}"
                    buildType="${build.is.packaging.debug}"
                    previousBuildType="${build.last.is.packaging.debug}"/>

        </do-only-if-manifest-hasCode>
    </target>
	
	<!-- Compiles this project's .java files into .class files. -->
    <target name="-compile" depends=" -save-manifest, -increase-version, -build-setup, -pre-build, -code-gen, -change-package-name,  -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- merge the project's own classpath and the tested project's classpath -->
            <path id="project.javac.classpath">
                <path refid="project.all.jars.path" />
                <path refid="tested.project.classpath" />
            </path>
            <javac encoding="MS950"
                    source="${java.source}" target="${java.target}"
                    debug="true" extdirs="" includeantruntime="false"
                    destdir="${out.classes.absolute.dir}"
                    bootclasspathref="project.target.class.path"
                    verbose="${verbose}"
                    classpathref="project.javac.classpath"
                    fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <compilerarg line="${java.compilerargs}" />
            </javac>

            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>

                    <!-- build the filter to remove R, Manifest, BuildConfig -->
                    <getemmafilter
                            appPackage="${project.app.package}"
                            libraryPackagesRefId="project.library.packages"
                            filterOut="emma.default.filter"/>

                    <!-- define where the .em file is going. This may have been
                         setup already if this is a library -->
                    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />

                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes"
                               metadatafile="${emma.coverage.absolute.file}">
                            <filter excludes="${emma.default.filter}" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>

            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo level="info">Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>

                    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                includes="**/*.class"
                                excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/Manifest.class ${project.app.package.path}/Manifest$*.class ${project.app.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

        </do-only-if-manifest-hasCode>
    </target>
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
